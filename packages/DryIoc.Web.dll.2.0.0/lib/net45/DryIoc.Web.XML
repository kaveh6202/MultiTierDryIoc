<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DryIoc.Web</name>
    </assembly>
    <members>
        <member name="T:DryIoc.Web.DryIocWeb">
            <summary>Extension to get container with ambient <see cref="P:System.Web.HttpContext.Current"/> scope context.</summary>
        </member>
        <member name="M:DryIoc.Web.DryIocWeb.WithHttpContextScopeContext(DryIoc.IContainer,System.Func{System.Collections.IDictionary})">
            <summary>Creates new container from original with HttpContext or arbitrary/test context <paramref name="getContextItems"/>.</summary>
            <param name="container">Original container with some rules and registrations.</param>
            <param name="getContextItems">(optional) Arbitrary or test context to use instead of <see cref="P:System.Web.HttpContext.Current"/>.</param>
            <returns>New container with the same rules and registrations/cache but with new ambient context.</returns>
        </member>
        <member name="T:DryIoc.Web.DryIocHttpModuleInitializer">
            <summary>Registers <see cref="T:DryIoc.Web.DryIocHttpModule"/>.</summary>
        </member>
        <member name="M:DryIoc.Web.DryIocHttpModuleInitializer.Initialize">
            <summary>Registers once the type of <see cref="T:DryIoc.Web.DryIocHttpModule"/>.</summary>
        </member>
        <member name="T:DryIoc.Web.DryIocHttpModule">
            <summary>Hooks up <see cref="M:DryIoc.Container.OpenScope(System.Object,System.Func{DryIoc.Rules,DryIoc.Rules})"/> on request beginning and scope dispose on request end.</summary>
        </member>
        <member name="M:DryIoc.Web.DryIocHttpModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>Initializes a module and prepares it to handle requests. </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application </param>
        </member>
        <member name="M:DryIoc.Web.DryIocHttpModule.System#Web#IHttpModule#Dispose">
            <summary>Disposes of the resources (other than memory) used by the module  that implements <see cref="T:System.Web.IHttpModule"/>.</summary>
        </member>
        <member name="T:DryIoc.Web.HttpContextScopeContext">
            <summary>Stores current scope in <see cref="P:System.Web.HttpContext.Items"/>.</summary>
            <remarks>Stateless context, so could be created multiple times and used from different places without side-effects.</remarks>
        </member>
        <member name="F:DryIoc.Web.HttpContextScopeContext.GetContextItems">
            <summary>Provides default context items dictionary using <see cref="P:System.Web.HttpContext.Current"/>.
            Could be overridden with any key-value dictionary where <see cref="T:System.Web.HttpContext"/> is not available, e.g. in tests.</summary>
        </member>
        <member name="M:DryIoc.Web.HttpContextScopeContext.#ctor(System.Func{System.Collections.IDictionary})">
            <summary>Creates the context optionally with arbitrary/test items storage.</summary>
            <param name="getContextItems">(optional) Arbitrary/test items storage.</param>
        </member>
        <member name="F:DryIoc.Web.HttpContextScopeContext.ScopeContextName">
            <summary>Fixed root scope name for the context.</summary>
        </member>
        <member name="M:DryIoc.Web.HttpContextScopeContext.GetCurrentOrDefault">
            <summary>Returns current ambient scope stored in item storage.</summary> <returns>Current scope or null if there is no.</returns>
        </member>
        <member name="M:DryIoc.Web.HttpContextScopeContext.SetCurrent(DryIoc.SetCurrentScopeHandler)">
            <summary>Sets the new scope as current using existing current as input.</summary>
            <param name="setCurrentScope">Delegate to get new scope.</param>
            <returns>Return new current scope.</returns>
        </member>
        <member name="M:DryIoc.Web.HttpContextScopeContext.Dispose">
            <summary>Nothing to dispose.</summary>
        </member>
        <member name="P:DryIoc.Web.HttpContextScopeContext.RootScopeName">
            <summary>Returns fixed name.</summary>
        </member>
    </members>
</doc>
